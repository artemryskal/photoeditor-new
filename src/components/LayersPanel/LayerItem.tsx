import React from 'react';
import type { Layer, BlendMode } from '../../types/CanvasTypes';
import { LayerPreview } from './LayerPreview';
import styles from './LayerItem.module.scss';

interface LayerItemProps {
  layer: Layer;
  index: number;
  isActive: boolean;
  onLayerClick: (layerId: string) => void;
  onToggleVisibility: (layerId: string, visible: boolean) => void;
  onUpdateOpacity: (layerId: string, opacity: number) => void;
  onUpdateBlendMode: (layerId: string, blendMode: BlendMode) => void;
  onDelete: (layerId: string) => void;
  onDragStart: (index: number) => void;
  onDragOver: (e: React.DragEvent) => void;
  onDrop: (e: React.DragEvent, index: number) => void;
  isDragging: boolean;
}

const BLEND_MODE_DESCRIPTIONS = {
  normal: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å',
  multiply: '–£–º–Ω–æ–∂–µ–Ω–∏–µ - —É–º–Ω–æ–∂–∞–µ—Ç —Ü–≤–µ—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º–æ–≥–æ —Å–ª–æ—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ —Ç–µ–º–Ω–µ–µ',
  screen: '–≠–∫—Ä–∞–Ω - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞, —É–º–Ω–æ–∂–∞–µ—Ç –∏—Ö –∏ —Å–Ω–æ–≤–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ç–ª–µ–µ',
  overlay: '–ù–∞–ª–æ–∂–µ–Ω–∏–µ - –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç multiply –∏ screen –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞',
};

export const LayerItem: React.FC<LayerItemProps> = ({
  layer,
  index,
  isActive,
  onLayerClick,
  onToggleVisibility,
  onUpdateOpacity,
  onUpdateBlendMode,
  onDelete,
  onDragStart,
  onDragOver,
  onDrop,
  isDragging,
}) => {
  const handleVisibilityToggle = () => {
    onToggleVisibility(layer.id, !layer.visible);
  };

  const handleOpacityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const opacity = parseFloat(e.target.value);
    onUpdateOpacity(layer.id, opacity);
  };

  const handleBlendModeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const blendMode = e.target.value as BlendMode;
    onUpdateBlendMode(layer.id, blendMode);
  };

  const handleDelete = () => {
    onDelete(layer.id);
  };

  return (
    <div
      className={`${styles.layerItem} ${isActive ? styles.active : ''} ${isDragging ? styles.dragging : ''}`}
      draggable
      onDragStart={() => onDragStart(index)}
      onDragOver={onDragOver}
      onDrop={(e) => onDrop(e, index)}
      onClick={() => onLayerClick(layer.id)}
    >
      <div className={styles.layerContent}>
        <div className={styles.layerInfo}>
          <LayerPreview layer={layer} />

          <div className={styles.layerDetails}>
            <div className={styles.layerName}>
              {layer.name}
              {isActive && <span className={styles.activeIndicator}>‚óè</span>}
            </div>

            <div className={styles.layerType}>{layer.type === 'image' ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–¶–≤–µ—Ç'}</div>
          </div>
        </div>

        <div className={styles.layerControls}>
          <button
            className={`${styles.visibilityButton} ${!layer.visible ? styles.hidden : ''}`}
            onClick={(e) => {
              e.stopPropagation();
              handleVisibilityToggle();
            }}
            title={layer.visible ? '–°–∫—Ä—ã—Ç—å —Å–ª–æ–π' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–π'}
          >
            üëÅ
          </button>

          <button
            className={styles.deleteButton}
            onClick={(e) => {
              e.stopPropagation();
              handleDelete();
            }}
            title="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–π"
          >
            üóë
          </button>
        </div>
      </div>

      <div className={styles.layerProperties}>
        <div className={styles.opacityControl}>
          <label htmlFor={`opacity-${layer.id}`}>–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
          <input
            id={`opacity-${layer.id}`}
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={layer.opacity}
            onChange={handleOpacityChange}
            onClick={(e) => e.stopPropagation()}
          />
          <span className={styles.opacityValue}>{Math.round(layer.opacity * 100)}%</span>
        </div>

        <div className={styles.blendModeControl}>
          <label htmlFor={`blend-${layer.id}`}>–†–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è:</label>
          <select
            id={`blend-${layer.id}`}
            value={layer.blendMode}
            onChange={handleBlendModeChange}
            onClick={(e) => e.stopPropagation()}
            title={BLEND_MODE_DESCRIPTIONS[layer.blendMode]}
          >
            <option value="normal">–ù–æ—Ä–º–∞–ª—å–Ω—ã–π</option>
            <option value="multiply">–£–º–Ω–æ–∂–µ–Ω–∏–µ</option>
            <option value="screen">–≠–∫—Ä–∞–Ω</option>
            <option value="overlay">–ù–∞–ª–æ–∂–µ–Ω–∏–µ</option>
          </select>
        </div>
      </div>
    </div>
  );
};
